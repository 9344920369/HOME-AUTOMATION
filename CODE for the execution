#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

#define JOY_X 34
#define JOY_Y 35

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define GRID_SIZE 4
#define MAX_LENGTH 64

int snakeX[MAX_LENGTH];
int snakeY[MAX_LENGTH];
int length = 3;

int foodX = 40;
int foodY = 20;

int dirX = 1;  // direction (1,0)=right
int dirY = 0;

unsigned long lastMove = 0;
int speed = 150;  // ms per move

void setup() {
  Serial.begin(115200);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  
  for (int i = 0; i < length; i++) {
    snakeX[i] = 20 - i * GRID_SIZE;
    snakeY[i] = 20;
  }

  randomSeed(analogRead(0));
  spawnFood();
}

void loop() {
  handleInput();

  if (millis() - lastMove > speed) {
    moveSnake();
    lastMove = millis();
  }

  drawGame();
}

void handleInput() {
  int xVal = analogRead(JOY_X);
  int yVal = analogRead(JOY_Y);

  if (xVal < 1000 && dirX == 0) {
    dirX = -1;
    dirY = 0;
  } else if (xVal > 3000 && dirX == 0) {
    dirX = 1;
    dirY = 0;
  } else if (yVal < 1000 && dirY == 0) {
    dirX = 0;
    dirY = -1;
  } else if (yVal > 3000 && dirY == 0) {
    dirX = 0;
    dirY = 1;
  }
}

void moveSnake() {
  int newX = snakeX[0] + dirX * GRID_SIZE;
  int newY = snakeY[0] + dirY * GRID_SIZE;

  // Check collision with self or wall
  if (newX < 0 || newX >= SCREEN_WIDTH || newY < 0 || newY >= SCREEN_HEIGHT || collidesWithBody(newX, newY)) {
    gameOver();
    return;
  }

  // Move tail
  for (int i = length - 1; i > 0; i--) {
    snakeX[i] = snakeX[i - 1];
    snakeY[i] = snakeY[i - 1];
  }
  snakeX[0] = newX;
  snakeY[0] = newY;

  // Check for food
  if (newX == foodX && newY == foodY) {
    if (length < MAX_LENGTH) {
      length++;
    }
    spawnFood();
  }
}

void drawGame() {
  display.clearDisplay();

  // Draw food
  display.fillRect(foodX, foodY, GRID_SIZE, GRID_SIZE, WHITE);

  // Draw snake
  for (int i = 0; i < length; i++) {
    display.fillRect(snakeX[i], snakeY[i], GRID_SIZE, GRID_SIZE, WHITE);
  }

  display.display();
}

void spawnFood() {
  bool valid = false;
  while (!valid) {
    foodX = (random(0, SCREEN_WIDTH / GRID_SIZE)) * GRID_SIZE;
    foodY = (random(0, SCREEN_HEIGHT / GRID_SIZE)) * GRID_SIZE;
    valid = !collidesWithBody(foodX, foodY);
  }
}

bool collidesWithBody(int x, int y) {
  for (int i = 0; i < length; i++) {
    if (snakeX[i] == x && snakeY[i] == y) return true;
  }
  return false;
}

void gameOver() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(20, 20);
  display.println("Game Over");
  display.display();
  delay(3000);
  
  length = 3;
  for (int i = 0; i < length; i++) {
    snakeX[i] = 20 - i * GRID_SIZE;
    snakeY[i] = 20;
  }
  dirX = 1;
  dirY = 0;
  spawnFood();
}

